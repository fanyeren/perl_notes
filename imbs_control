#!/bin/bash

version="0.0.9"
build_time="2009-03-05"

###########################
# Argument handle for QA  #
###########################
#You can change port_number to check,
#for QA/RD to run multi-services on one hosts that need to change port_number.
while getopts 'm:s:u:p:' arg
do
    case $arg in
        m)
            monitor_port=$OPTARG
            ;;
        s)
            service_port=$OPTARG
            ;;
        p)
            supervise_dir=$OPTARG
            ;;
        u)
            operator=$OPTARG
                echo "Run by $operator !"
            ;;
        ?)
            echo "Usage: $0 [-u qa -m monitor_port -s service_port] start|stop|restart|reload|cleanup|version|help|check"
            exit 1
            ;;
    esac
done
#after shift $(($OPTIND - 1)) , $* just left start|stop
shift $(($OPTIND - 1))

############################
## standandard tools path ##
############################
home_dir="/home/${USER}"
supervise_dir=${supervise_dir:-"${home_dir}/opbin/supervise"}
lock_dir="${supervise_dir}/lock"
status_dir="${supervise_dir}/status"
adsea_check_dir="${home_dir}/opbin/adsea-check"
adsea_check_script="adsea-check.sh"
[ ! -d ${lock_dir} ] && mkdir -p ${lock_dir}
[ ! -d ${status_dir} ] && mkdir -p ${status_dir}

#############################################
## extract information form control script ##
#############################################
script_name=$(basename $0)
program_name=$(echo ${script_name} | sed 's/\([[:alnum:]]\+\)_control$/\1/')
pid_file=${lock_dir}/${script_name}.lck
warning_script="${home_dir}/${program_name}/bin/warning_${program_name}.sh"
status_check_script="status_check.sh"
program_running_flag="$program_name"

operator=${operator:-op}
if [[ $operator = "qa" || $operator = "rd" ]];then
    module_path_md5=$(echo `pwd`|md5sum|awk '{print $1}')
    program_running_flag="${program_name}_${module_path_md5}"
    pid_file=${lock_dir}/${script_name}.${program_running_flag}.lck
    status_check_script="status_check.sh -m $monitor_port -s $service_port"
fi
##########################
## predefined functions ##
##########################
function print_version() {

cat <<-print_version
    ${script_name} ${version}
    Copyright Baidu Inc.
print_version
}

function usage() {

cat <<-usage
    Usage: ${script_name} [-u qa -m monitor_port -s service_port] start|stop|restart|reload|cleanup|version|help|check
usage
}

check_process() {
    ps wx | grep -w "./bin/${program_name}" | grep -v "grep" | grep -w "supervise" |grep -w "${program_running_flag}" >/dev/null
}

check_adsea() {
        ${adsea_check_dir}/${adsea_check_script} >/dev/null
}

write_pid2file() {
    echo $(ps wx | grep -v grep | grep -w "./bin/${program_name}" | grep -w "supervise" |grep -w "${program_running_flag}" | awk '{print $1}') > ${pid_file}
    echo $1
}

#####################
## process command ##
#####################
## step 1 , get parameter number
[ $# -ne 1 ] && echo "Wrong args number. [$# != 1]" && exit 1
command_input=$1

## 根据不同的参数选择不同的接口行为
case X"${command_input}" in
    Xstart*)
    ## 进入程序启动目录，此处不一定为bin目录，一般为实例目录
    cd ../ &&
    {
        ##检查进程中是否存在相关服务的supervise进程，有则退出并检查pid文件内容是否正确；没有则启动服务。
        check_process
        if [ $? -eq 0 ];then
            echo "${program_name} is running. exit!"
            if [ -f ${pid_file} ];then
                old_pid=$(cat ${pid_file})
                if [ ! -z ${old_pid} ];then    ##pid文件不为空
                    ps wx | grep -w "./bin/${program_name}" | grep -v grep | awk '{print $1}' | grep -w "${old_pid}" >/dev/null
                    if [ $? -eq 0 ];then
                        exit 1    ##pid文件中的pid是正确的
                    else
                        write_pid2file "pid in pid file wrong , write the correct pid into."
                        exit 1
                    fi
                else
                    write_pid2file "pid file empty , write the correct pid into."
                    exit 1
                fi
            fi
            write_pid2file "pid file not exist , create & write."
            exit 1
        else
            echo "${program_name} is not running."
        fi

        #base_path=`grep base_path ${home_dir}/${program_name}/conf/adload.conf | awk '{print $3}'`
        #index_filename=`grep index_filename ${home_dir}/${program_name}/conf/adload.conf | awk '{print $3}'`
        #dex_dir=`cat ${base_path}/${index_filename}`
        #base_dir=${base_path}/${index_dir}
        #if [ -f /home/work/opbin/bin/loadcache ]; then
        #    chmod +x /home/work/opbin/bin/loadcache
        #    echo "Load ${home_dir}/${program_name}/data/ to cache ..."
        #    echo "Load ${base_dir} to cache ..."
        #    /home/work/opbin/bin/loadcache ${home_dir}/${program_name}/data/ ${base_dir} >/dev/null &
        #fi

        echo "${program_name} ${command_input}."
        ## 需要执行的命令,包括检查命令，将进程组ID写入pid文件，便于停止的时候杀掉进程组
        check_adsea
        [ $? -eq 0 ] &&
        {
            echo -e "adsea is ok.\n"
            #mkdir -p ${home_dir}/${program_name}/status/ && touch ${home_dir}/${program_name}/status/starting
            ulimit -c unlimited
            [ $command_input == 'startc' ] && postfix_command="" || postfix_command="-i"
            ${supervise_dir}/bin/supervise -p ${status_dir}/${program_running_flag} -f "nohup ./bin/${program_name} --flagfile=conf/flags -- ${postfix_command}" -r ${warning_script} -t 60 &>/dev/null &
            echo $! > ${pid_file}
            ./bin/${status_check_script} start || exit 1
            #./bin/${status_check_script} start && rm -rf ${home_dir}/${program_name}/status/starting || exit 1
        } || {
            echo -e "adsea is not ok, pls check.\n"
            exit 1
        }
    }
        ;;
    Xstop)
        echo "${program_name} ${command_input}."
        ## 需要执行的命令,包括检查命令
        cd ../ &&
        {
            old_pid=$(cat ${pid_file})
            group_pid=`ps awx -o "%p %r %P" | grep -w ${old_pid} | awk '{if($3!=1) print $2}'`
            child_pid=`ps awx -o "%p %r %P" | grep -w ${old_pid} | awk '{if($3!=1) print $1}'`
            kill -9 ${old_pid} &>/dev/null
            kill ${child_pid} &>/dev/null
            sleep 20
            [ -d /proc/${child_pid} ] &&  killall -9 ${program_name}
            ./bin/${status_check_script} stop || exit 1
        }
        ;;
    Xrestart)
        echo "${program_name} ${command_input}."
        ## 需要执行的命令,包括检查命令
        { : ;  }
        ;;
    Xreload)
        echo "${program_name} ${command_input}."
        ## 需要执行的命令,包括检查命令
        { : ; }
        ;;
    Xcleanup)
        echo "${program_name} ${command_input}."
        ## 需要执行的命令,包括检查命令
        {
            old_pid=$(cat ${pid_file})
            group_pid=`ps awx -o "%p %r" | grep -w ${old_pid} | awk '{print $2}'`
            kill -9 ${old_pid} &>/dev/null
            kill -9 -${group_pid} &>/dev/null
            sleep 10
            kill -9 -${group_pid} &>/dev/null
            exit 0
        }
        ;;
    Xcheck)
        echo "${program_name} ${command_input}."
        ## 需要执行的命令,包括检查命令
        { : ; }
        ;;
    Xhelp)
        usage
        ;;
    Xversion)
        print_version
        ;;
    *)
        echo "Unsupport command [${command_input}]."
        exit 1
        ;;
esac

exit 0
